datasource postgres {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  createdAt DateTime  @default(now())
  firstName String?
  id        String    @id @default(cuid())
  lastName  String?
  password  String
  projects  Project[]
  roles     String[]
  tasks     Task[]
  updatedAt DateTime  @updatedAt
  username  String    @unique
}

model Project {
  createdAt   DateTime  @default(now())
  description String?
  dueDate     DateTime?
  id          String    @id @default(cuid())
  name        String?
  owner       User      @relation(fields: [ownerId], references: [id])
  ownerId     String
  startDate   DateTime?
  tasks       Task[]
  updatedAt   DateTime  @updatedAt
}

model Task {
  assignedTo   User?          @relation(fields: [assignedToId], references: [id])
  assignedToId String?
  createdAt    DateTime       @default(now())
  estimation   Int?
  id           String         @id @default(cuid())
  project      Project        @relation(fields: [projectId], references: [id])
  projectId    String
  startDate    DateTime
  status       EnumTaskStatus
  title        String
  updatedAt    DateTime       @updatedAt
}

model Food {
  category   Category    @relation(fields: [categoryId], references: [id])
  categoryId String
  createdAt  DateTime    @default(now())
  direction  Direction[]
  element    Element[]
  flavor     Flavor[]
  heat       Heat        @relation(fields: [heatId], references: [id])
  heatId     String
  id         String      @id @default(cuid())
  recipe     Recipe[]
  symptom    Symptom[]
  updatedAt  DateTime    @updatedAt
  where      Where[]
}

model Category {
  createdAt DateTime @default(now())
  foods     Food[]
  id        String   @id @default(cuid())
  name      String
  updatedAt DateTime @updatedAt
}

model Heat {
  color     String?
  createdAt DateTime @default(now())
  foods     Food[]
  id        String   @id @default(cuid())
  name      String
  updatedAt DateTime @updatedAt
}

model Element {
  createdAt DateTime @default(now())
  foods     Food[]
  id        String   @id @default(cuid())
  name      String
  updatedAt DateTime @updatedAt
}

model Direction {
  createdAt DateTime @default(now())
  foods     Food[]
  id        String   @id @default(cuid())
  name      String?
  updatedAt DateTime @updatedAt
}

model Flavor {
  createdAt DateTime @default(now())
  foods     Food[]
  id        String   @id @default(cuid())
  name      String?
  updatedAt DateTime @updatedAt
}

model Where {
  createdAt DateTime @default(now())
  foods     Food[]
  id        String   @id @default(cuid())
  name      String?
  updatedAt DateTime @updatedAt
}

model Symptom {
  createdAt   DateTime @default(now())
  description String?
  food        Food?    @relation(fields: [foodId], references: [id])
  foodId      String?
  id          String   @id @default(cuid())
  name        String
  updatedAt   DateTime @updatedAt
}

model Recipe {
  createdAt   DateTime @default(now())
  description String
  foods       Food[]
  id          String   @id @default(cuid())
  updatedAt   DateTime @updatedAt
}

enum EnumTaskStatus {
  new
  pending
  onHold
  ongoing
  done
}